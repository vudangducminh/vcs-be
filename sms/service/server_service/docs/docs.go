// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Vu Dang Duc Minh",
            "url": "https://github.com/vudangducminh",
            "email": "vudangducminh@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Check the health status of the server service and its dependencies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/src.HealthResponse"
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "$ref": "#/definitions/entities.RateLimitExceededResponse"
                        }
                    },
                    "503": {
                        "description": "Service unavailable",
                        "schema": {
                            "$ref": "#/definitions/src.HealthResponse"
                        }
                    }
                }
            }
        },
        "/servers/add-server": {
            "post": {
                "description": "Add a new server by validating input and storing server information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server"
                ],
                "summary": "Add a new server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token for authentication",
                        "name": "jwt",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Add server request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.AddServerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Server added",
                        "schema": {
                            "$ref": "#/definitions/entities.AddServerSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/entities.AddServerBadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/entities.AuthErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Server already exists",
                        "schema": {
                            "$ref": "#/definitions/entities.AddServerConflictResponse"
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "$ref": "#/definitions/entities.RateLimitExceededResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entities.AddServerInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/servers/delete-server": {
            "delete": {
                "description": "Delete a server by its unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server"
                ],
                "summary": "Delete a server by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token for authentication",
                        "name": "jwt",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Delete server request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.DeleteServerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Server deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/entities.DeleteServerResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/entities.AuthErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Server not found",
                        "schema": {
                            "$ref": "#/definitions/entities.DeleteServerStatusNotFoundResponse"
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "$ref": "#/definitions/entities.RateLimitExceededResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entities.DeleteServerInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/servers/export-excel": {
            "get": {
                "description": "Export server data to an Excel file with optional filtering and ordering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server"
                ],
                "summary": "Export server data to Excel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token for authentication",
                        "name": "jwt",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Order of results, either 'asc' or 'desc'. If not provided or using the wrong order format, the default order is ascending",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by server_name, ipv4, or status. If not provided or using the wrong filter format, then there is no filter applied",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Substring to search in server_name, ipv4, or status",
                        "name": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Excel file exported successfully",
                        "schema": {
                            "$ref": "#/definitions/entities.ExportExcelSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/entities.ExportExcelBadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/entities.AuthErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "$ref": "#/definitions/entities.RateLimitExceededResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to export into Excel file",
                        "schema": {
                            "$ref": "#/definitions/entities.ExportExcelFailedResponse"
                        }
                    }
                }
            }
        },
        "/servers/import-excel": {
            "post": {
                "description": "Import server data from an Excel file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server"
                ],
                "summary": "Import file from excel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token for authentication",
                        "name": "jwt",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Excel file to import",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Excel file imported successfully",
                        "schema": {
                            "$ref": "#/definitions/entities.ImportExcelSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve file",
                        "schema": {
                            "$ref": "#/definitions/entities.ImportExcelRetrieveFailedResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/entities.AuthErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "$ref": "#/definitions/entities.RateLimitExceededResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to add server to Elasticsearch from Excel row",
                        "schema": {
                            "$ref": "#/definitions/entities.ImportExcelElasticsearchErrorResponse"
                        }
                    }
                }
            }
        },
        "/servers/update-server": {
            "put": {
                "description": "Update an existing server by validating input and updating server information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server"
                ],
                "summary": "Update an existing server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token for authentication",
                        "name": "jwt",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Update server request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UpdateServerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Server updated",
                        "schema": {
                            "$ref": "#/definitions/entities.UpdateServerSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/entities.UpdateServerBadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/entities.AuthErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Server not found",
                        "schema": {
                            "$ref": "#/definitions/entities.UpdateServerStatusNotFoundResponse"
                        }
                    },
                    "409": {
                        "description": "Server IP already exists",
                        "schema": {
                            "$ref": "#/definitions/entities.UpdateServerConflictResponse"
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "$ref": "#/definitions/entities.RateLimitExceededResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entities.UpdateServerInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/servers/view-servers": {
            "get": {
                "description": "View server details with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server"
                ],
                "summary": "View server details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token for authentication",
                        "name": "jwt",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Order of results, either 'asc' or 'desc'. If not provided or using the wrong order format, the default order is ascending",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by server_name, ipv4, or status. If not provided or using the wrong filter format, the default filter is server_name",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Substring to search in server_name, ipv4, or status",
                        "name": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Server details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/entities.ViewServerSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/entities.ViewServerBadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/entities.AuthErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "schema": {
                            "$ref": "#/definitions/entities.RateLimitExceededResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve server details",
                        "schema": {
                            "$ref": "#/definitions/entities.ViewServerInternalServerErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entities.AddServerBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "entities.AddServerConflictResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Server already exists"
                }
            }
        },
        "entities.AddServerInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "entities.AddServerRequest": {
            "type": "object",
            "properties": {
                "ipv4": {
                    "description": "IPv4 address of the server",
                    "type": "string"
                },
                "server_name": {
                    "type": "string"
                },
                "status": {
                    "description": "e.g., \"active\", \"inactive\", \"maintenance\"",
                    "type": "string"
                }
            }
        },
        "entities.AddServerSuccessResponse": {
            "type": "object",
            "properties": {
                "_id": {
                    "description": "Unique identifier for the server",
                    "type": "string"
                },
                "ipv4": {
                    "description": "IPv4 address of the server",
                    "type": "string"
                },
                "message": {
                    "description": "Confirmation message",
                    "type": "string",
                    "example": "Server added"
                },
                "server_name": {
                    "description": "Name of the server",
                    "type": "string"
                }
            }
        },
        "entities.AuthErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Authentication failed"
                }
            }
        },
        "entities.DeleteServerInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "entities.DeleteServerRequest": {
            "type": "object",
            "required": [
                "_id"
            ],
            "properties": {
                "_id": {
                    "type": "string"
                }
            }
        },
        "entities.DeleteServerResponse": {
            "type": "object",
            "properties": {
                "_id": {
                    "description": "Unique identifier for the deleted server",
                    "type": "string"
                },
                "ipv4": {
                    "description": "IPv4 address of the deleted server",
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Server deleted successfully"
                },
                "server_name": {
                    "description": "Name of the deleted server",
                    "type": "string"
                }
            }
        },
        "entities.DeleteServerStatusNotFoundResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Server not found"
                }
            }
        },
        "entities.ExportExcelBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request parameters"
                }
            }
        },
        "entities.ExportExcelFailedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to export into Excel file"
                }
            }
        },
        "entities.ExportExcelInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to retrieve server details"
                }
            }
        },
        "entities.ExportExcelSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Excel file exported successfully"
                }
            }
        },
        "entities.ImportExcelElasticsearchErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to add server to Elasticsearch from Excel row"
                }
            }
        },
        "entities.ImportExcelInvalidFileFormatResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid file format"
                }
            }
        },
        "entities.ImportExcelOpenFileFailedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to open file"
                }
            }
        },
        "entities.ImportExcelReadFileFailedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to read Excel rows"
                }
            }
        },
        "entities.ImportExcelRetrieveFailedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to retrieve file"
                }
            }
        },
        "entities.ImportExcelSuccessResponse": {
            "type": "object",
            "properties": {
                "added_servers": {
                    "type": "integer",
                    "example": 5
                },
                "error_servers": {
                    "type": "integer",
                    "example": 2
                },
                "message": {
                    "type": "string",
                    "example": "Excel file imported successfully"
                }
            }
        },
        "entities.RateLimitExceededResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Rate limit exceeded. Please try again later."
                }
            }
        },
        "entities.Server": {
            "type": "object",
            "properties": {
                "_id": {
                    "description": "Unique identifier for the server",
                    "type": "string"
                },
                "created_time": {
                    "description": "Unix timestamp",
                    "type": "integer"
                },
                "ipv4": {
                    "type": "string"
                },
                "last_updated_time": {
                    "description": "Unix timestamp",
                    "type": "integer"
                },
                "server_name": {
                    "type": "string"
                },
                "status": {
                    "description": "e.g., \"active\", \"inactive\", \"maintenance\"",
                    "type": "string"
                },
                "uptime": {
                    "description": "e.g., \"3666\" for 1 hour 1 minute and 6 seconds",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "entities.UpdateServerBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "entities.UpdateServerConflictResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Server already exists with the same IPv4 address"
                }
            }
        },
        "entities.UpdateServerInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "entities.UpdateServerRequest": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "server_name": {
                    "type": "string"
                },
                "status": {
                    "description": "e.g., \"active\", \"inactive\", \"maintenance\"",
                    "type": "string"
                }
            }
        },
        "entities.UpdateServerStatusNotFoundResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Server not found"
                }
            }
        },
        "entities.UpdateServerSuccessResponse": {
            "type": "object",
            "properties": {
                "_id": {
                    "description": "Unique identifier for the server",
                    "type": "string"
                },
                "ipv4": {
                    "description": "IPv4 address of the server",
                    "type": "string"
                },
                "last_updated_time": {
                    "description": "Last updated time in ISO 8601 format",
                    "type": "string"
                },
                "message": {
                    "description": "Confirmation message",
                    "type": "string",
                    "example": "Server updated"
                },
                "server_name": {
                    "description": "Name of the server",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the server, e.g., \"active\", \"inactive\", \"maintenance\"",
                    "type": "string"
                }
            }
        },
        "entities.ViewServerBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request parameters"
                }
            }
        },
        "entities.ViewServerInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to retrieve server details"
                }
            }
        },
        "entities.ViewServerSuccessResponse": {
            "type": "object",
            "properties": {
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Server"
                    }
                }
            }
        },
        "src.HealthResponse": {
            "type": "object",
            "properties": {
                "services": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "description": "\"Operations related to server management\"",
            "name": "Server"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "server.localhost",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "VCS System Management API",
	Description:      "This is a sample server for VCS System Management API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
