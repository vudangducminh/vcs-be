// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Vu Dang Duc Minh",
            "url": "https://github.com/vudangducminh",
            "email": "vudangducminh@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Check the health status of the user service and its dependencies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/src.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service unavailable",
                        "schema": {
                            "$ref": "#/definitions/src.HealthResponse"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Handle user login by validating credentials and generating a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Handle user login",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/entities.LoginSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/entities.LoginBadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/entities.LoginUnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Error generating token",
                        "schema": {
                            "$ref": "#/definitions/entities.LoginInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Handle user registration by validating input and storing account information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Handle user registration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token for authentication",
                        "name": "jwt",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Registration request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/entities.RegisterSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/entities.RegisterBadRequestResponse"
                        }
                    },
                    "409": {
                        "description": "Account already exists",
                        "schema": {
                            "$ref": "#/definitions/entities.RegisterConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/entities.RegisterInternalServerErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entities.LoginBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "entities.LoginInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Error generating token"
                },
                "message": {
                    "type": "string",
                    "example": "Error generating token"
                }
            }
        },
        "entities.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "entities.LoginSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Login successful"
                }
            }
        },
        "entities.LoginUnauthorizedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid credentials"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid credentials"
                }
            }
        },
        "entities.RegisterBadRequestResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "entities.RegisterConflictResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Account already exists"
                }
            }
        },
        "entities.RegisterInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "entities.RegisterRequest": {
            "type": "object",
            "required": [
                "confirm_password",
                "email",
                "fullname",
                "password",
                "role",
                "username"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "entities.RegisterSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Registration successful"
                }
            }
        },
        "src.HealthResponse": {
            "type": "object",
            "properties": {
                "services": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "description": "\"Operations related to User management\"",
            "name": "User"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8800",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "VCS System Management API",
	Description:      "This is a sample server for VCS System Management API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
