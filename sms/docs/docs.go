// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Vu Dang Duc Minh",
            "url": "https://github.com/vudangducminh",
            "email": "vudangducminh@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "post": {
                "description": "Handle user authentication by validating JWT token and returning username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Handle user authentication",
                "parameters": [
                    {
                        "description": "Authentication request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authentication successfully",
                        "schema": {
                            "$ref": "#/definitions/object.AuthResponse"
                        }
                    }
                }
            }
        },
        "/servers/add_server": {
            "post": {
                "description": "Handle adding a new server by validating input and storing server information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Handle adding a new server",
                "parameters": [
                    {
                        "description": "Add server request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.AddServerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Server added",
                        "schema": {
                            "$ref": "#/definitions/object.AddServerResponse"
                        }
                    }
                }
            }
        },
        "/servers/delete_server/{server_id}": {
            "delete": {
                "description": "Delete a server by its unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Delete a server by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "server_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Server deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/object.DeleteServerResponse"
                        }
                    }
                }
            }
        },
        "/servers/import_excel": {
            "post": {
                "description": "Import server data from an Excel file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Import file from excel",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Excel file to import",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Excel file imported successfully",
                        "schema": {
                            "$ref": "#/definitions/object.ImportCSVResponse"
                        }
                    }
                }
            }
        },
        "/servers/update_server": {
            "put": {
                "description": "Handle updating an existing server by validating input and updating server information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Handle updating an existing server",
                "parameters": [
                    {
                        "description": "Update server request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.UpdateServerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Server updated",
                        "schema": {
                            "$ref": "#/definitions/object.UpdateServerResponse"
                        }
                    }
                }
            }
        },
        "/servers/view_server/{server_name}": {
            "get": {
                "description": "View server details by server name substring\nExample usage:\t\t\t/servers/view_server/\u003cserver_name\u003e",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "View server details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server name substring",
                        "name": "server_name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of servers",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/object.Server"
                            }
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Handle user login by validating credentials and generating a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Handle user login",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/object.LoginResponse"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "Handle user registration by validating input and storing account information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Handle user registration",
                "parameters": [
                    {
                        "description": "Registration request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/object.RegisterResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "object.AddServerRequest": {
            "type": "object",
            "properties": {
                "created_time": {
                    "description": "ISO 8601 format",
                    "type": "string"
                },
                "ipv4": {
                    "description": "IPv4 address of the server",
                    "type": "string"
                },
                "last_updated_time": {
                    "description": "ISO 8601 format",
                    "type": "string"
                },
                "server_id": {
                    "type": "string"
                },
                "server_name": {
                    "type": "string"
                },
                "status": {
                    "description": "e.g., \"active\", \"inactive\", \"maintenance\"",
                    "type": "string"
                },
                "uptime": {
                    "description": "e.g., \"3666\" for 1 hour 1 minute and 6 seconds",
                    "type": "integer"
                }
            }
        },
        "object.AddServerResponse": {
            "type": "object",
            "properties": {
                "ipv4": {
                    "description": "IPv4 address of the server",
                    "type": "string"
                },
                "message": {
                    "description": "Confirmation message",
                    "type": "string",
                    "example": "Server added"
                },
                "server_id": {
                    "description": "Unique identifier for the server",
                    "type": "string"
                },
                "server_name": {
                    "description": "Name of the server",
                    "type": "string"
                }
            }
        },
        "object.AuthRequest": {
            "type": "object",
            "required": [
                "jwt"
            ],
            "properties": {
                "jwt": {
                    "type": "string"
                }
            }
        },
        "object.AuthResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Authentication successfully"
                }
            }
        },
        "object.DeleteServerResponse": {
            "type": "object",
            "properties": {
                "ipv4": {
                    "description": "IPv4 address of the deleted server",
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Server deleted successfully"
                },
                "server_id": {
                    "description": "Unique identifier for the deleted server",
                    "type": "string"
                },
                "server_name": {
                    "description": "Name of the deleted server",
                    "type": "string"
                }
            }
        },
        "object.ImportCSVResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "File imported successfully"
                }
            }
        },
        "object.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "object.LoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Login successful"
                }
            }
        },
        "object.RegisterRequest": {
            "type": "object",
            "required": [
                "confirm_password",
                "email",
                "fullname",
                "password",
                "username"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "object.RegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Registration successful"
                }
            }
        },
        "object.Server": {
            "type": "object",
            "properties": {
                "createdTime": {
                    "description": "ISO 8601 format",
                    "type": "string"
                },
                "ipv4": {
                    "type": "string"
                },
                "lastUpdatedTime": {
                    "description": "ISO 8601 format",
                    "type": "string"
                },
                "serverId": {
                    "type": "string"
                },
                "serverName": {
                    "type": "string"
                },
                "status": {
                    "description": "e.g., \"active\", \"inactive\", \"maintenance\"",
                    "type": "string"
                },
                "uptime": {
                    "description": "e.g., \"3666\" for 1 hour 1 minute and 6 seconds",
                    "type": "integer"
                }
            }
        },
        "object.UpdateServerRequest": {
            "type": "object",
            "properties": {
                "created_time": {
                    "description": "ISO 8601 format",
                    "type": "string"
                },
                "ipv4": {
                    "description": "IPv4 address of the server",
                    "type": "string"
                },
                "last_updated_time": {
                    "description": "ISO 8601 format",
                    "type": "string"
                },
                "server_id": {
                    "type": "string"
                },
                "server_name": {
                    "type": "string"
                },
                "status": {
                    "description": "e.g., \"active\", \"inactive\", \"maintenance\"",
                    "type": "string"
                },
                "uptime": {
                    "description": "e.g., \"3666\" for 1 hour 1 minute and 6 seconds",
                    "type": "integer"
                }
            }
        },
        "object.UpdateServerResponse": {
            "type": "object",
            "properties": {
                "ipv4": {
                    "description": "IPv4 address of the server",
                    "type": "string"
                },
                "last_updated_time": {
                    "description": "Last updated time in ISO 8601 format",
                    "type": "string"
                },
                "message": {
                    "description": "Confirmation message",
                    "type": "string",
                    "example": "Server updated"
                },
                "server_id": {
                    "description": "Unique identifier for the server",
                    "type": "string"
                },
                "server_name": {
                    "description": "Name of the server",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the server, e.g., \"active\", \"inactive\", \"maintenance\"",
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "description": "\"Operations related to user authentication and management\"",
            "name": "Users"
        },
        {
            "description": "\"Operations related to user authentication\"",
            "name": "Auth"
        },
        {
            "description": "\"Operations related to server management\"",
            "name": "Servers"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8800",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "VCS System Management API",
	Description:      "This is a sample server for VCS System Management API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
