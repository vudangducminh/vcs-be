// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Vu Dang Duc Minh",
            "url": "https://github.com/vudangducminh",
            "email": "vudangducminh@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "post": {
                "description": "Handle user authentication by validating JWT token and returning username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Handle user authentication",
                "parameters": [
                    {
                        "description": "Authentication request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authentication successfully",
                        "schema": {
                            "$ref": "#/definitions/object.AuthSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/object.AuthErrorResponse"
                        }
                    }
                }
            }
        },
        "/servers/add_server": {
            "post": {
                "description": "Handle adding a new server by validating input and storing server information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Handle adding a new server",
                "parameters": [
                    {
                        "description": "Add server request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.AddServerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Server added",
                        "schema": {
                            "$ref": "#/definitions/object.AddServerSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/object.AddServerBadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/object.AuthErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Server already exists",
                        "schema": {
                            "$ref": "#/definitions/object.AddServerConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/object.AddServerInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/servers/delete_server/{server_id}": {
            "delete": {
                "description": "Delete a server by its unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Delete a server by ID",
                "parameters": [
                    {
                        "description": "Delete server request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.DeleteServerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Server deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/object.DeleteServerResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/object.AuthErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Server not found",
                        "schema": {
                            "$ref": "#/definitions/object.DeleteServerStatusNotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/object.DeleteServerInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/servers/export_excel/{order}/{filter}/{string}": {
            "get": {
                "description": "Export server data to an Excel file with optional filtering and ordering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Export server data to Excel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token for authentication",
                        "name": "jwt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order of results, either 'asc' or 'desc'. If not provided or using the wrong order format, the default order is ascending",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by server_id, server_name, ipv4, or status. If not provided or using the wrong filter format, then there is no filter applied",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Substring to search in server_id, server_name, ipv4, or status",
                        "name": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Excel file exported successfully",
                        "schema": {
                            "$ref": "#/definitions/object.ExportExcelSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/object.ExportExcelBadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/object.AuthErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No servers found with the given requirements",
                        "schema": {
                            "$ref": "#/definitions/object.ExportExcelStatusNotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to export Excel",
                        "schema": {
                            "$ref": "#/definitions/object.ExportExcelExportFailedResponse"
                        }
                    }
                }
            }
        },
        "/servers/import_excel": {
            "post": {
                "description": "Import server data from an Excel file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Import file from excel",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Excel file to import",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JWT token for authentication",
                        "name": "jwt",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Excel file imported successfully",
                        "schema": {
                            "$ref": "#/definitions/object.ImportExcelSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve file",
                        "schema": {
                            "$ref": "#/definitions/object.ImportExcelRetrieveFailedResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/object.AuthErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to add server to PostgreSQL from Excel row",
                        "schema": {
                            "$ref": "#/definitions/object.ImportExcelPostgreSQLErrorResponse"
                        }
                    }
                }
            }
        },
        "/servers/update_server": {
            "put": {
                "description": "Handle updating an existing server by validating input and updating server information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "Handle updating an existing server",
                "parameters": [
                    {
                        "description": "Update server request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.UpdateServerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Server updated",
                        "schema": {
                            "$ref": "#/definitions/object.UpdateServerSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/object.UpdateServerBadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/object.AuthErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Server not found",
                        "schema": {
                            "$ref": "#/definitions/object.UpdateServerStatusNotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/object.UpdateServerInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/servers/view_servers/{order}/{filter}/{string}": {
            "get": {
                "description": "View server details with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Servers"
                ],
                "summary": "View server details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token for authentication",
                        "name": "jwt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order of results, either 'asc' or 'desc'. If not provided or using the wrong order format, the default order is ascending",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by server_id, server_name, ipv4, or status. If not provided or using the wrong filter format, the default filter is server_name",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Substring to search in server_id, server_name, ipv4, or status",
                        "name": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Server details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/object.ViewServerSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/object.ViewServerBadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/object.AuthErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve server details",
                        "schema": {
                            "$ref": "#/definitions/object.ViewServerInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Handle user login by validating credentials and generating a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Handle user login",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/object.LoginResponse"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "Handle user registration by validating input and storing account information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Handle user registration",
                "parameters": [
                    {
                        "description": "Registration request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/object.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/object.RegisterResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "object.AddServerBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "object.AddServerConflictResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Server already exists"
                }
            }
        },
        "object.AddServerInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "object.AddServerRequest": {
            "type": "object",
            "required": [
                "jwt"
            ],
            "properties": {
                "created_time": {
                    "description": "ISO 8601 format",
                    "type": "string"
                },
                "ipv4": {
                    "description": "IPv4 address of the server",
                    "type": "string"
                },
                "jwt": {
                    "type": "string"
                },
                "last_updated_time": {
                    "description": "ISO 8601 format",
                    "type": "string"
                },
                "server_name": {
                    "type": "string"
                },
                "status": {
                    "description": "e.g., \"active\", \"inactive\", \"maintenance\"",
                    "type": "string"
                },
                "uptime": {
                    "description": "e.g., \"3666\" for 1 hour 1 minute and 6 seconds",
                    "type": "integer"
                }
            }
        },
        "object.AddServerSuccessResponse": {
            "type": "object",
            "properties": {
                "ipv4": {
                    "description": "IPv4 address of the server",
                    "type": "string"
                },
                "message": {
                    "description": "Confirmation message",
                    "type": "string",
                    "example": "Server added"
                },
                "server_id": {
                    "description": "Unique identifier for the server",
                    "type": "string"
                },
                "server_name": {
                    "description": "Name of the server",
                    "type": "string"
                }
            }
        },
        "object.AuthErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Authentication failed"
                }
            }
        },
        "object.AuthRequest": {
            "type": "object",
            "required": [
                "jwt"
            ],
            "properties": {
                "jwt": {
                    "type": "string"
                }
            }
        },
        "object.AuthSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Authentication successfully"
                }
            }
        },
        "object.DeleteServerInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "object.DeleteServerRequest": {
            "type": "object",
            "required": [
                "jwt",
                "server_id"
            ],
            "properties": {
                "jwt": {
                    "type": "string"
                },
                "server_id": {
                    "type": "string"
                }
            }
        },
        "object.DeleteServerResponse": {
            "type": "object",
            "properties": {
                "ipv4": {
                    "description": "IPv4 address of the deleted server",
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "Server deleted successfully"
                },
                "server_id": {
                    "description": "Unique identifier for the deleted server",
                    "type": "string"
                },
                "server_name": {
                    "description": "Name of the deleted server",
                    "type": "string"
                }
            }
        },
        "object.DeleteServerStatusNotFoundResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Server not found"
                }
            }
        },
        "object.ExportExcelBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request parameters"
                }
            }
        },
        "object.ExportExcelExportFailedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to export Excel"
                }
            }
        },
        "object.ExportExcelInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to retrieve server details"
                }
            }
        },
        "object.ExportExcelStatusNotFoundResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "No servers found with the given requirements"
                }
            }
        },
        "object.ExportExcelSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Excel file exported successfully"
                }
            }
        },
        "object.ImportExcelElasticsearchErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to add server to Elasticsearch from Excel row"
                }
            }
        },
        "object.ImportExcelInvalidFileFormatResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid file format"
                }
            }
        },
        "object.ImportExcelOpenFileFailedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to open file"
                }
            }
        },
        "object.ImportExcelPostgreSQLErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to add server to PostgreSQL from Excel row"
                }
            }
        },
        "object.ImportExcelReadFileFailedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to read Excel rows"
                }
            }
        },
        "object.ImportExcelRetrieveFailedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to retrieve file"
                }
            }
        },
        "object.ImportExcelSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Excel file imported successfully"
                }
            }
        },
        "object.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "object.LoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Login successful"
                }
            }
        },
        "object.RegisterRequest": {
            "type": "object",
            "required": [
                "confirm_password",
                "email",
                "fullname",
                "password",
                "username"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "object.RegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Registration successful"
                }
            }
        },
        "object.Server": {
            "type": "object",
            "properties": {
                "createdTime": {
                    "description": "ISO 8601 format",
                    "type": "string"
                },
                "ipv4": {
                    "type": "string"
                },
                "lastUpdatedTime": {
                    "description": "ISO 8601 format",
                    "type": "string"
                },
                "serverId": {
                    "type": "string"
                },
                "serverName": {
                    "type": "string"
                },
                "status": {
                    "description": "e.g., \"active\", \"inactive\", \"maintenance\"",
                    "type": "string"
                },
                "uptime": {
                    "description": "e.g., \"3666\" for 1 hour 1 minute and 6 seconds",
                    "type": "integer"
                }
            }
        },
        "object.UpdateServerBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "object.UpdateServerInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "object.UpdateServerRequest": {
            "type": "object",
            "properties": {
                "created_time": {
                    "description": "ISO 8601 format",
                    "type": "string"
                },
                "ipv4": {
                    "description": "IPv4 address of the server",
                    "type": "string"
                },
                "jwt": {
                    "description": "JWT token for authentication",
                    "type": "string"
                },
                "last_updated_time": {
                    "description": "ISO 8601 format",
                    "type": "string"
                },
                "server_id": {
                    "type": "string"
                },
                "server_name": {
                    "type": "string"
                },
                "status": {
                    "description": "e.g., \"active\", \"inactive\", \"maintenance\"",
                    "type": "string"
                },
                "uptime": {
                    "description": "e.g., \"3666\" for 1 hour 1 minute and 6 seconds",
                    "type": "integer"
                }
            }
        },
        "object.UpdateServerStatusNotFoundResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Server not found"
                }
            }
        },
        "object.UpdateServerSuccessResponse": {
            "type": "object",
            "properties": {
                "ipv4": {
                    "description": "IPv4 address of the server",
                    "type": "string"
                },
                "last_updated_time": {
                    "description": "Last updated time in ISO 8601 format",
                    "type": "string"
                },
                "message": {
                    "description": "Confirmation message",
                    "type": "string",
                    "example": "Server updated"
                },
                "server_id": {
                    "description": "Unique identifier for the server",
                    "type": "string"
                },
                "server_name": {
                    "description": "Name of the server",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the server, e.g., \"active\", \"inactive\", \"maintenance\"",
                    "type": "string"
                }
            }
        },
        "object.ViewServerBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request parameters"
                }
            }
        },
        "object.ViewServerInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to retrieve server details"
                }
            }
        },
        "object.ViewServerSuccessResponse": {
            "type": "object",
            "properties": {
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/object.Server"
                    }
                }
            }
        }
    },
    "tags": [
        {
            "description": "\"Operations related to user authentication and management\"",
            "name": "Users"
        },
        {
            "description": "\"Operations related to user authentication\"",
            "name": "Auth"
        },
        {
            "description": "\"Operations related to server management\"",
            "name": "Servers"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8800",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "VCS System Management API",
	Description:      "This is a sample server for VCS System Management API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
