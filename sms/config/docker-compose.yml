services:
  # traefik:
  #   image: traefik:v3.0
  #   container_name: traefik
  #   command:
  #     - "--api.insecure=true"
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--entrypoints.web.address=:80"
  #     - "--entrypoints.websecure.address=:443"
  #     - "--log.level=INFO"
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #     - "8080:8080"  # Traefik dashboard
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   networks:
  #     - sms_network
  #   restart: unless-stopped
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
  #     - "traefik.http.routers.dashboard.service=api@internal"

  postgresql:
    image: postgres:15-alpine
    container_name: postgresql
    environment:
      - POSTGRES_USER=vudangducminh
      - POSTGRES_PASSWORD=Amogus69420
      - POSTGRES_DB=postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sms_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vudangducminh -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - sms_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  user_service:
    build:
      context: ../service/user_service
      dockerfile: Dockerfile
    container_name: user_service
    environment:
      - GO_ENV=production
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=5432
      - POSTGRES_USER=vudangducminh
      - POSTGRES_PASSWORD=Amogus69420
      - POSTGRES_DB=postgres
    ports:
      - "8800:8800"
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - sms_network
    volumes:
      - ../service/user_service/logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8800/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
  # labels:
  #   - "traefik.enable=true"
  #   - "traefik.http.routers.user-service.rule=Host(`user.localhost`)"
  #   - "traefik.http.routers.user-service.entrypoints=web"
  #   - "traefik.http.services.user-service.loadbalancer.server.port=8800"

  server_service:
    build:
      context: ../service/server_service
      dockerfile: Dockerfile
    container_name: server_service
    environment:
      - GO_ENV=production
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=5432
      - POSTGRES_USER=vudangducminh
      - POSTGRES_PASSWORD=Amogus69420
      - POSTGRES_DB=postgres
      - USER_SERVICE_URL=http://user_service:8800
    ports:
      - "8801:8801"
    depends_on:
      user_service:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    networks:
      - sms_network
    volumes:
      - ../service/server_service/logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8801/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
  # labels:
  #   - "traefik.enable=true"
  #   - "traefik.http.routers.server-service.rule=Host(`server.localhost`)"
  #   - "traefik.http.routers.server-service.entrypoints=web"
  #   - "traefik.http.services.server-service.loadbalancer.server.port=8801"

  report_service:
    build:
      context: ../service/report_service
      dockerfile: Dockerfile
    container_name: report_service
    environment:
      - GO_ENV=production
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=5432
      - POSTGRES_USER=vudangducminh
      - POSTGRES_PASSWORD=Amogus69420
      - POSTGRES_DB=postgres
      - USER_SERVICE_URL=http://user_service:8800
      - SERVER_SERVICE_URL=http://server_service:8801
    ports:
      - "8802:8802"
    depends_on:
      user_service:
        condition: service_healthy
      server_service:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    networks:
      - sms_network
    volumes:
      - ../service/report_service/logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8802/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
  # labels:
  #   - "traefik.enable=true"
  #   - "traefik.http.routers.report-service.rule=Host(`report.localhost`)"
  #   - "traefik.http.routers.report-service.entrypoints=web"
  #   - "traefik.http.services.report-service.loadbalancer.server.port=8802"

  healthcheck_service:
    build:
      context: ../service/healthcheck_service
      dockerfile: Dockerfile
    container_name: healthcheck_service
    environment:
      - GO_ENV=production
      - USER_SERVICE_URL=http://user_service:8800
      - SERVER_SERVICE_URL=http://server_service:8801
      - REPORT_SERVICE_URL=http://report_service:8802
    ports:
      - "8803:8803"
    depends_on:
      server_service:
        condition: service_healthy
    networks:
      - sms_network
    volumes:
      - ../service/healthcheck_service/logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8803/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
# labels:
#   - "traefik.enable=true"
#   - "traefik.http.routers.healthcheck-service.rule=Host(`health.localhost`)"
#   - "traefik.http.routers.healthcheck-service.entrypoints=web"
#   - "traefik.http.services.healthcheck-service.loadbalancer.server.port=8803"

networks:
  sms_network:
    driver: bridge

volumes:
  postgres_data:
  elasticsearch_data: